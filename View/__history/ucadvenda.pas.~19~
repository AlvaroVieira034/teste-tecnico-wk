unit ucadvenda;

interface

{$REGION 'Uses'}

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, UCadastroPadrao, Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtCtrls,
  Data.DB, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error,
  FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  Vcl.Grids, Vcl.DBGrids, Vcl.DBCtrls, conexao.model, cliente.model, cliente.controller, venda.model,
  vendaitens.model, venda.controller, vendaitens.controller;
{$ENDREGION}

type
  TOperacao = (opInicio, opNovo, opEditar, opNavegar);
  TFrmCadVenda = class(TFrmCadastroPadrao)

{$REGION 'Componentes'}

    Label1: TLabel;
    Label2: TLabel;
    Label4: TLabel;
    EdtCodVenda: TEdit;
    EdtDataVenda: TEdit;
    EdtTotalVenda: TEdit;
    Label3: TLabel;
    EdtCodCliente: TEdit;
    LcbxNomeCliente: TDBLookupComboBox;
    Label10: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    EdtQuantidade: TEdit;
    EdtPrecoUnit: TEdit;
    EdtPrecoTotal: TEdit;
    LCbxProdutos: TDBLookupComboBox;
    BtnAddItemGrid: TButton;
    BtnDelItemGrid: TButton;
    DbGridItensPedido: TDBGrid;
    MTblVendaItem: TFDMemTable;
    MTblVendaItemID_VENDA: TIntegerField;
    MTblVendaItemCOD_VENDA: TIntegerField;
    MTblVendaItemCOD_PRODUTO: TIntegerField;
    MTblVendaItemVAL_QUANTIDADE: TIntegerField;
    MTblVendaItemVAL_PRECO_UNITARIO: TSingleField;
    MTblVendaItemVAL_TOTAL_VENDA: TSingleField;
    DsVendaItem: TDataSource;
    BtnInserirItens: TButton;
    BtnLimpaCampos: TSpeedButton;
    BtnPesquisar: TSpeedButton;

{$ENDREGION}

    procedure FormCreate(Sender: TObject);


    procedure BtnSairClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure BtnPesquisarClick(Sender: TObject);
    procedure EdtCodClienteExit(Sender: TObject);
    procedure EdtCodClienteKeyPress(Sender: TObject; var Key: Char);
    procedure LcbxNomeClienteClick(Sender: TObject);

  private
    ValoresOriginais: array of string;
    TblVendas: TFDQuery;
    QryVendas: TFDQuery;
    QryTemp: TFDQuery;
    DsVendas: TDataSource;
    TblClientes: TFDQuery;
    DsClientes: TDataSource;
    TransacaoVendas: TFDTransaction;
    FCliente: TCliente;
    ClienteController: TClienteController;
    FVenda: TVenda;
    VendaController: TVendaController;
    FVendaItens: TVendaItens;
    VendaItensController: TVendaItensController;

    procedure CarregarVendas;
    procedure InserirVendas;
    procedure InserirVendaItens;
    procedure AlterarVendas;
    procedure AlterarVendaItens;
    procedure ExcluirVendas;
    function ValidarDados(tipoDados: string): Boolean;
    procedure LimpaCamposPedido;
    procedure LimpaCamposItens;
    procedure PreencheCdsVendaItem(FOperacao: TOperacao);
    procedure VerificaBotoes(AOperacao: TOperacao);
    procedure MostrarMensagemErro(AErro: TCampoInvalido);


  public
    FOperacao: TOperacao;
    pesqVenda: Boolean;
    codigoVenda: Integer;
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

var
  FrmCadVenda: TFrmCadVenda;
  totVenda: Double;
  idItem: Integer;

implementation

{$R *.dfm}

uses umain, untFormat, upesqvendas;


constructor TFrmCadVenda.Create(AOwner: TComponent);
begin
  inherited;
  TransacaoVendas := TFDTransaction.Create(nil);
  TblVendas := TFDQuery.Create(nil);
  DsVendas := TDataSource.Create(nil);
  TblClientes := TFDQuery.Create(nil);
  DsClientes := TDataSource.Create(nil);
  QryVendas := TFDQuery.Create(nil);
  QryTemp := TFDQuery.Create(nil);
end;

destructor TFrmCadVenda.Destroy;
begin
  TransacaoVendas.Free;
  DsVendas.Free;
  DsClientes.Free;
  TblVendas.Free;
  TblClientes.Free;
  QryVendas.Free;
  QryTemp.Free;
  inherited;
end;

procedure TFrmCadVenda.FormCreate(Sender: TObject);
var sCampo: string;
begin
  inherited;
  if TConexao.GetInstance.Connection.TestarConexao then
  begin
    TConexao.GetInstance.Connection.InciarTransacao;
    TransacaoVendas := TConexao.GetInstance.Connection.CriarTransaction;

    // Cria Tabelas/Querys
    TblVendas := TConexao.GetInstance.Connection.CriarQuery;
    TblClientes := TConexao.GetInstance.Connection.CriarQuery;
    QryVendas := TConexao.GetInstance.Connection.CriarQuery;

    QryVendas.Transaction := TransacaoVendas;

    // Cria DataSource
    DsVendas := TConexao.GetInstance.Connection.CriarDataSource;
    DsClientes := TConexao.GetInstance.Connection.CriarDataSource;
    //DsVendaItem := TConexao.GetInstance.Connection.CriarDataSource;

    // Atribui DataSet às tabelas
    DsVendas.DataSet := TblVendas;
    DsClientes.DataSet := TblClientes;



    //DsVendaItem.DataSet := MTblVendaItem;
    //DbGridItensPedido.DataSource := DsVendaItem;

    //Instancias Classes
    FCliente := TCliente.Create;
    ClienteController := TClienteController.Create;
    FVenda := TVenda.Create;
    VendaController := TVendaController.Create;
    FVendaItens := TVendaItens.Create;
    VendaItensController := TVendaItensController.Create;

    // Variáveis locais
    sCampo := 'vda.dta_venda';
    totVenda := 0;
    pesqVenda := False;
    SetLength(ValoresOriginais, 5);
    FOperacao := opInicio;
    MTblVendaItem.CreateDataSet;
  end
  else
  begin
    ShowMessage('Não foi possível conectar ao banco de dados!');
    Close;
  end;

end;

procedure TFrmCadVenda.FormShow(Sender: TObject);
begin
  inherited;
  ClienteController.PreencherGrid(TblClientes, ' %', 'Nome');

  LcbxNomeCliente.KeyField := 'cod_cliente';
  LcbxNomeCliente.ListField := 'des_nomecliente';
  LcbxNomeCliente.ListSource := DsClientes;

  DbGridItensPedido.Columns[0].Width := 80;
  DbGridItensPedido.Columns[1].Width := 350;
  DbGridItensPedido.Columns[2].Width := 80;
  DbGridItensPedido.Columns[3].Width := 100;
  DbGridItensPedido.Columns[4].Width := 100;
  if FOperacao = opInicio then
  begin
    VerificaBotoes(opInicio);
    LimpaCamposPedido();
    //GrbDados.Enabled := False;
  end;

    if FOperacao = opNovo then
  begin
    BtnInserirItens.Caption := 'Inserir Itens';
    LimpaCamposPedido();
    EdtTotalVenda.Text := '0.00';
  end;

  if FOperacao = opEditar then
  begin
    ValoresOriginais[0] := EdtCodVenda.Text;
    ValoresOriginais[1] := EdtDataVenda.Text;
    ValoresOriginais[2] := EdtCodCliente.Text;
    ValoresOriginais[3] := LcbxNomeCliente.Text;
    ValoresOriginais[4] := EdtTotalVenda.Text;
    BtnInserirItens.Caption := 'Alterar Itens';
  end;

  if FOperacao = opNavegar then
  begin
    LimpaCamposPedido();
  end;
end;

procedure TFrmCadVenda.AlterarVendaItens;
begin

end;

procedure TFrmCadVenda.AlterarVendas;
begin

end;

procedure TFrmCadVenda.BtnPesquisarClick(Sender: TObject);
begin
  inherited;
  pesqVenda := False;
  if not Assigned(FrmPesquisaVendas) then
    FrmPesquisaVendas := TFrmPesquisaVendas.Create(Self);

  FrmPesquisaVendas.ShowModal;
  FrmPesquisaVendas.Free;
  FrmPesquisaVendas := nil;

  if pesqVenda then
  begin
    VerificaBotoes(opNavegar);
    CarregarVendas();
    //DbGridItensPedido.Refresh;
  end;
end;

procedure TFrmCadVenda.BtnSairClick(Sender: TObject);
begin
  inherited;
  Close;
end;

procedure TFrmCadVenda.CarregarVendas;
var Venda: TVenda;
    VendaItens: TVendaItens;
begin
  MTblVendaItem.Close;
  MTblVendaItem.CreateDataSet;
  //ClienteController.
  VendaController.CarregarCampos(QryVendas, FVenda, codigoVenda);
  try
    with FVenda do
    begin
      EdtCodVenda.Text := IntToStr(Cod_Venda);
      EdtDataVenda.Text := DateToStr(Dta_Venda);
      EdtCodCliente.Text := IntToStr(Cod_Cliente);
      EdtTotalVenda.Text := FormatFloat('##,###,##0.00', Val_Venda);
    end;

    {VendaItens.Carregar(VendaItens, codigoVenda);
    with DmTabelas.QryPesquisarItens do
    begin
      while not DmTabelas.QryPesquisarItens.eof do
      begin
        MTblVendaItem.Append;
        MTblVendaItemID_VENDA.AsInteger := FieldByName('ID_VENDA').AsInteger;
        MTblVendaItemCOD_VENDA.AsInteger := FieldByName('COD_VENDA').AsInteger;
        MTblVendaItemCOD_PRODUTO.AsInteger := FieldByName('COD_PRODUTO').AsInteger;
        MTblVendaItemDES_DESCRICAO.AsString := FieldByName('DES_DESCRICAO').AsString;
        MTblVendaItemVAL_QUANTIDADE.AsInteger := FieldByName('VAL_QUANTIDADE').AsInteger;
        MTblVendaItemVAL_PRECO_UNITARIO.AsFloat := FieldByName('VAL_PRECO_UNITARIO').AsFloat;
        MTblVendaItemVAL_TOTAL_VENDA.AsFloat := FieldByName('VAL_TOTAL_VENDA').AsFloat;
        MTblVendaItem.Post;
        DmTabelas.QryPesquisarItens.Next;
      end;
    end;}
  finally
    FreeAndNil(FVenda);
    FreeAndNil(FVendaItens);
  end;

end;

procedure TFrmCadVenda.EdtCodClienteExit(Sender: TObject);
begin
  inherited;
  if EdtCodCliente.Text <> '' then
    LCbxNomeCliente.KeyValue := StrToInt(EdtCodCliente.Text);
end;

procedure TFrmCadVenda.EdtCodClienteKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if not( key in['0'..'9',#08] ) then
    key:=#0;
end;

procedure TFrmCadVenda.ExcluirVendas;
begin

end;

procedure TFrmCadVenda.InserirVendaItens;
begin

end;

procedure TFrmCadVenda.InserirVendas;
begin

end;

procedure TFrmCadVenda.LimpaCamposPedido;
begin
  EdtCodVenda.Text := EmptyStr;
  EdtDataVenda.Text := EmptyStr;
  EdtCodCliente.Text := EmptyStr;
  //LcbxNomeCliente.Text := '';
  EdtTotalVenda.Text := '0.00';
end;

procedure TFrmCadVenda.LcbxNomeClienteClick(Sender: TObject);
begin
  inherited;
  if LCbxNomeCliente.KeyValue > 0 then
    EdtCodCliente.Text := IntToStr(LcbxNomeCliente.KeyValue)
end;

procedure TFrmCadVenda.LimpaCamposItens;
begin
  LCbxProdutos.KeyValue := 0;
  EdtQuantidade.Text := EmptyStr;
  EdtPrecoUnit.Text := EmptyStr;
  EdtPrecoTotal.Text := EmptyStr;
end;

procedure TFrmCadVenda.PreencheCdsVendaItem(FOperacao: TOperacao);
begin

end;

function TFrmCadVenda.ValidarDados(tipoDados: string): Boolean;
begin

end;

procedure TFrmCadVenda.VerificaBotoes(AOperacao: TOperacao);
begin
  BtnInserir.Enabled := AOperacao in [opInicio, opNavegar];
  BtnPesquisar.Enabled := AOperacao in [opInicio, opNavegar];
  BtnAlterar.Enabled := AOperacao = opNavegar;
  BtnExcluir.Enabled := AOperacao = opNavegar;
  BtnSair.Enabled := AOperacao in [opInicio, opNavegar];

  BtnGravar.Enabled := AOperacao in [opNovo, opEditar];
  BtnCancelar.Enabled := AOperacao in [opNovo, opEditar];

  //GrbDados.Enabled := AOperacao in [opNovo, opEditar];
  //DBGridProdutos.Enabled := AOperacao in [opInicio, opNavegar];
end;

procedure TFrmCadVenda.MostrarMensagemErro(AErro: TCampoInvalido);
begin

end;

end.
