unit produto.controller;

interface

uses uprodutorepositoryintf, produto.model, produtorepository.model, system.SysUtils, Vcl.Forms, FireDAC.Comp.Client,
     Data.DB;

type
  TCampoInvalido = (ciNome, ciDescricao, ciPreco, ciPrecoZero);
  TProdutoController = class

  private
    FProduto: TProduto;
    FProdutoRepo: TProdutoRepository;
    TblProdutos: TFDQuery;
    QryProdutos: TFDQuery;
    QryTemp: TFDQuery;
    DsProdutos: TDataSource;
    TransacaoProdutos: TFDTransaction;

  public
    constructor Create();
    destructor Destroy; override;
    procedure PreencherGrid(APesquisa, ACampo: string);
    procedure PreencherComboProduto;
    function CarregarCampos(FProduto: TProduto; iCodigo: Integer): Boolean;
    function Inserir(FProduto: TProduto; var sErro: string): Boolean;
    function Alterar(FProduto: TProduto; iCodigo: Integer; sErro: string): Boolean;
    function Excluir(iCodigo: Integer; var sErro: string): Boolean;
    function ValidarDados(const ADescricao, APreco: string; out AErro: TCampoInvalido): Boolean;
    function GetValorUnitario(ACodigo: Integer): Double;
    procedure CriarTabelas;
    procedure CriarCamposTabelas;

  end;

implementation

{ TProdutoController }

constructor TProdutoController.Create();
begin
  FProduto := TProduto.Create();
  FProdutoRepo := TProdutoRepository.Create;
end;

destructor TProdutoController.Destroy;
begin
  FProduto.Free;
  FProdutoRepo.Free;
  inherited;
end;

procedure TProdutoController.CriarTabelas;
begin
  TransacaoProdutos := TConexao.GetInstance.Connection.CriarTransaction;
  TblProdutos := TConexao.GetInstance.Connection.CriarQuery;
  QryProdutos := TConexao.GetInstance.Connection.CriarQuery;
  QryProdutos.Transaction := TransacaoProdutos;
  DsProdutos := TConexao.GetInstance.Connection.CriarDataSource;
  DsProdutos.DataSet := TblProdutos;
  DBGridProdutos.DataSource := DsProdutos;
end;

procedure TProdutoController.CriarCamposTabelas;
var
  FloatField: TFloatField;
  StringField: TStringField;
  DateField: TDateField;
  IntegerField: TIntegerField;
begin
  // Criando o campo COD_PRODUTO
  IntegerField := TIntegerField.Create(TblProdutos);
  IntegerField.FieldName := 'COD_PRODUTO';
  IntegerField.DataSet := TblProdutos;
  IntegerField.Name := 'TblProdutosCOD_PRODUTO';

  // Criando o campo NOME_PRODUTO
  StringField := TStringField.Create(TblProdutos);
  StringField.FieldName := 'DES_DESCRICAO';
  StringField.Size := 100;
  StringField.DataSet := TblProdutos;
  StringField.Name := 'TblProdutosDES_DESCRICAO';

  // Criando o campo VAL_PRECO
  FloatField := TFloatField.Create(TblProdutos);
  FloatField.FieldName := 'VAL_PRECO';
  FloatField.DataSet := TblProdutos;
  FloatField.Name := 'TblProdutosVAL_PRECO';
  FloatField.DisplayFormat := '#,###,##0.00';
end;

procedure TProdutoController.PreencherGrid(APesquisa, ACampo: string);
var LCampo, sErro: string;
begin
  if ACampo = 'Código' then
    LCampo := 'prd.cod_produto';

  if ACampo = 'Descrição' then
    LCampo := 'prd.des_descricao';

  if ACampo = '' then
    LCampo := 'prd.des_descricao';

  FProdutoRepo.PreencherGrid(APesquisa, LCampo);
end;

procedure TProdutoController.PreencherComboProduto();
begin
  FProdutoRepo.PreencherComboProduto();
end;

function TProdutoController.CarregarCampos(FProduto: TProduto; iCodigo: Integer): Boolean;
var sErro: string;
begin
  try
    FProdutoRepo.CarregarCampos(FProduto, iCodigo);
  except on E: Exception do
    begin
      sErro := 'Ocorreu um erro ao carregar o produto!' + sLineBreak + E.Message;
      Result := False;
      raise;
    end;
  end;
end;

function TProdutoController.Inserir(FProduto: TProduto; var sErro: string): Boolean;
begin
  Result := FProdutoRepo.Inserir(FProduto, sErro);
end;

function TProdutoController.Alterar(FProduto: TProduto; iCodigo: Integer; sErro: string): Boolean;
begin
  Result := FProdutoRepo.Alterar(FProduto, iCodigo, sErro);
end;

function TProdutoController.Excluir(iCodigo: Integer; var sErro: String): Boolean;
begin
  Result := FProdutoRepo.Excluir(iCodigo, sErro);
end;

function TProdutoController.GetValorUnitario(ACodigo: Integer): Double;
begin
  Result := FProdutoRepo.GetValorUnitario(ACodigo);
end;

function TProdutoController.ValidarDados(const ADescricao, APreco: string; out AErro: TCampoInvalido): Boolean;
begin
  Result := True;
  if ADescricao = EmptyStr then
  begin
    AErro := ciDescricao;
    Result := False;
    Exit;
  end;

  if APreco = EmptyStr then
  begin
    AErro := ciPreco;
    Result := False;
    Exit;
  end;

  if APreco = '0.00' then
  begin
    AErro := ciPrecoZero;
    Result := False;
    Exit;
  end;
end;

end.
